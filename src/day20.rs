use std::collections::BTreeMap;
use itertools::Itertools;


type Data = (Vec<bool>, BTreeMap<Point, bool>);


#[derive(Debug, Eq, Ord, PartialOrd, PartialEq, Clone)]
pub struct Point (i32, i32);

impl Point {
    pub fn enhance_string(&self, set: &BTreeMap<Point, bool>, default: char) -> usize {
        let replacement = (self.1-1..=self.1+1).into_iter().cartesian_product((self.0-1..=self.0+1).into_iter()).map(|(y, x)| {
            /*if self.0 == 2 && self.1 == 2 {
                println!("{},{}",x ,y);
            }*/
            match set.get(&Point(x, y)) {
                Some(true) => '1',
                Some(false) => '0',
                _ => default
            }
        }).collect::<String>();
        let rep = usize::from_str_radix(replacement.as_str(), 2).unwrap();

        /*if self.0 == 2 && self.1 == 2 {
            println!("==> {}",rep);
        }*/
        rep
    }
}


#[aoc_generator(day20)]
pub fn generator(input: &str) -> Data {
    let (p1, p2) = input.split_once("\n\n").unwrap();
    let replacements = p1.chars().into_iter().map(|c| {
        match c {
            '#' => true,
            '.' => false,
            _ => unreachable!(),
        }
    }).collect::<Vec<bool>>();

    let mut image = BTreeMap::<Point,bool>::new();

    p2.lines().enumerate().into_iter().for_each(|(y, l)| {
        l.chars().enumerate().for_each(|(x, c)| {
            let val = match c {
                '#' => true,
                '.' => false,
                _ => unreachable!()
            };
            image.insert(Point(x as i32, y as i32), val);
        })
    });

    (replacements, image)
}

pub fn run_replacement(cur: &mut BTreeMap<Point, bool>, next: &mut BTreeMap<Point, bool>, rep: &Vec<bool>, default: char) {
    let xmin = cur.iter().map(|(Point(x,y), _)| *x).min().unwrap();
    let ymin = cur.iter().map(|(Point(x,y), _)| *y).min().unwrap();
    let xmax = cur.iter().map(|(Point(x,y), _)| *x).max().unwrap();
    let ymax = cur.iter().map(|(Point(x,y), _)| *y).max().unwrap();

    let offset = 1;

    (ymin-offset..=ymax+offset).cartesian_product(xmin-offset..=xmax+offset).for_each(|(y, x)| {
        let id = Point(x,y).enhance_string(cur, default);
        next.insert(Point(x, y), rep[id]);
    });
}

pub fn print_map(current: &BTreeMap<Point, bool>) {
    let xmin = current.iter().map(|(Point(x,y), _)| *x).min().unwrap();
    let ymin = current.iter().map(|(Point(x,y), _)| *y).min().unwrap();
    let xmax = current.iter().map(|(Point(x,y), _)| *x).max().unwrap();
    let ymax = current.iter().map(|(Point(x,y), _)| *y).max().unwrap();
    (ymin-3..=ymax+3).for_each(|y| {
        let s = (xmin-3..=xmax+3).map(|x| {
            match current.get(&Point(x,y)) {
                Some(true) => '#',
                Some(false) => '.',
                _ => '_'
            }
        }).collect::<String>();
        println!("{}", s);
    });
    println!();
    println!();
}

pub fn run_iterations(inputs: &Data, n: usize) -> usize {
    let (rep, mut current) = inputs.clone();
    let mut next = BTreeMap::<Point,bool>::new();

    for i in 0..n {
        next.clear();
        let default = if rep[0] && !rep[511] {
            if i % 2 == 1 {
                '1'
            } else {
                '0'
            }
        } else {
            '0'
        };
        run_replacement(&mut current, &mut next, &rep, default);
        std::mem::swap(&mut current, &mut next);
    }
    current.iter().filter(|(p, &lit)| lit).count()
}

#[aoc(day20, part1)]
pub fn part1(inputs: &Data) -> usize {
    run_iterations(inputs, 2)
}

#[aoc(day20, part2)]
pub fn part2(inputs: &Data) -> usize {
    run_iterations(inputs, 50)
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    pub fn test1() {
        let input = generator

#..#.
#....
##..#
..#..
..###");
        assert_eq!(part1(&input), 35);
    }
    #[test]
    pub fn test1_2() {
        let input = generator

###.#.##.##..#....##.#....#.....##....#.#...#..##..###.#.#.###.#.#.#.#.#.##..#####...#...#.#..##....
....##.#...#..######.#.#.#######...##..##.#######.#.##..#...###..####.#..#.###..##...##.###.#..##.#.
.##.#..#######..#..#.......#.#####.##.#.#.#.##....##.##.###....####.##.#......#.#.#.####.###...####.
#.#.##..#####.##...###..#......####.#.#.###......##.#.###.#...#.##.#.#.###...##...###..###.####..#..
#..##.#....#.#....##.#####.##..#..##.#.#.#...#..#.####....##...#......#.##..##.##.#....###..##....#.
.#.......#.#...####..###...##......#.#.##.###.#..#.##..#....#..###.###.#.#.##..#.#.#.####.#..#.#.#..
####.##..#...###.#.##...#..###....##.##....##.####.#.##.##..##..#..##.##.#..###.#......###....#.#...
#....#.#..#.###.##..##.#.###....###.#.##.#...###.##..##.##.#..##.#...#....##...####.#..##...#.....#.
#...#.##.#..#....##....#.###.#.##.#.##.#..#......##.###..#......#..##...#.###..#.###..#..###..#.##.#
##..#.#####.#..##...#.....##.###..##.....#.#.#.##..###...#......##..#.###..#....##.#.####.###.##.#.#
##..##.#.##..#.#.#####.##.......#......#....#..####.#.##..#.#......#..#.#####.###.###.#.#.###.#..#.#
#......#..###........##.#.###.###..##..#.######....##..##....####..##..######.....###.#..##.####.#..
..###...#....#...###.#........#.###.#.###.####.###.####.####....##...#.##.###.......#.##..##.#....##
.###.#..###.##...#...##.###.##..#.#.#####.##...#....#.#####..####...#####.#.#.###..#.###...#..##.##.
##.#.#.#.#.#.#...###..###....##########.##...#.#..##...####..###.###.#.#######...##.###.#.##.###.##.
..#....###.##.#.#.....#...##...##.#.##..##.####....####...##....#.######.#..##.#...###..#.#..##.....
#.#...##....###.##.###.##..##..#.###..#...##.#.###...#...###...##.#.#....####.####..#..#.#.##.#..##.
....##..#...#.##..#..###..#..#...#.#####.#..#.####..#...##.######..###.#.#....###..#...####...###.#.
..#......#.#...#.##...#.####.###.#.##.#####.....#..#...#########....#.#####..#..#####.##.#.....#.#..
#....#.#.#.#...##.#..#.#..#########..##........######.####...#..#.##..#.#.##.......#.....##.###...#.
.###.#.##.#...##.###...####.#.########...#..##..##...#.##.##...##.....#.#..#.##....##...#..##.#..###
###..#.#..#.#..#.#####....#.....##.##..#......##.#..###...#.##...##...#.###...#.#.####.#..#..##..#..
#.#..#....#.#.#...#...###..#####.##.###.#..#.#.............#.....#####.#.#.#..##...#.###...#.##.#.##
#.##.#...##..#.#..#..####..#..##.#.############...#..#.#...#...###.....#.#.#...#.#.#####..###.#..###
#.##.#..###.#.###.##.#.#.#.##.#..#.#.#.##..#.##.##.####..#..##....##..####.##.#.#.#.#.######.....#..
.####.###.#####...##.#.####...###.#.###..##...#.#.....#.#.###...#...######.#.#..#.#...##..#...####..
##.##.###.##.#....#####...#..#.#.#.#.##.##.##......#..#..#..###.##....#####....##..##.###.###...#.##
.###.#....##.#.##....##....#####.#.#.#..#.#.#.###...###.###..##...###.####...#.#.#...#.......##.#.#.
..####.###..##..####...#.#####.##.##.#.####.##.####..#...#..#.####.###.######.##.###..#.#.##...##..#
..####...#.##.##.###...#..##..####..#.##.#..#..####.#.......#..#..##....###..#.#....##..##..##..#..#
...#.#.##.##...#.#####.#..#######..###.###...##.####.#.####.######.#.##.#...#.#####..##..#.#.#######
##.#.#.#.#...###...#.#......##......##...#....####.######.#....###...##.#.##.#.#..#...##..#.#..##...
#####.###.##.##..#.#.....########.###..####..#.#..#..#....##...###.#...###.#.####..###..#......#.#..
#.#..#...#####...#...#.#..#.####..###.#...###..#.#.#...###.####....#####...###.#..##.#..##....######
#.....#.#..#######...#.#....#.#....###..##..#..####.......#.....#..#.....#...####.###..###.#.##.#..#
.##..##..#.....##...###.......#.##..#..###..#.##.#...#..#.####..#.##...#.....###.#.#..#.#..##.#...##
.#..#.#.##.#...##..##.#####..######.###..##.#.#.#.###..#####..#....###..........#.###...##.......#.#
######..#.#####...##.#.#..##..#....###.##..###...#.#.###.####..#...##..#.###.....####.###.......##..
.#.###.#.#..#.###..###.#...###....###...#.#.#.#.#..####.##..#####...#.##.##..#.#.#..##.###.#...#.##.
...#####.#....#..#######...#..#.##...##.#.#..#.....#.....#....##..#..#.#....#.##.#..###...##..####..
##...#....#.#..##.####..#.##..#.#..#.##....#.###..#.#####..#.###..##.....##.#.###.......#.#..#.#..#.
.###...##.#.##.##.#....#.#.####..#....##..#.##...####..#..#.##.#.#....#.....####...##.##.##.....####
##...#.####...###.#.##...#...#.....####.#....#.#.##..#.#.#.#..#..#..#.......###...#.##..#.#.....####
.###...#...##.#...#..##.#.#..###.#..#.##..#.###....########...#...##.##.#.#.#.#....#.....#....#.....
#......##.##.##...##..#.##.......##.#.####.......#.#.######...#......###....########..#..######.###.
########.#.###....#.#...###..##.###.###.#..#.#...#...#..###..##..###.....##.#....#.##.#..##...##.###
.#..###...###.##.....##.##..#......#.##.....###...###...####.#..#.#..#...#...#..##.#.##...#.####...#
.....#####...#.##.###..####....##.#...#.##..#..##..##.#.###.###.###.#.#..#.##...##....###..#..#....#
.###...#.###..##.#.#.###..#.###.###.##.#.##...#...##.#.#......#.....##.....##.##..##.#.####....#.##.
.#..##.##...####.##...#.#..#.#.###...##.##.#.###....#..##.######..#.####.#.#.##.##.##.##.........#.#
.#..##.#.#....###.##.##.###########.#..#.##.#####....###.....###.#######......#.##..#.#....#.##..##.
##.###.##.##.#.##.......##..#.##..##.##..#.###.#######.##.#.#...###....#...###....#.#.....#..#..#.##
...##.###.#......#.#.####.##.....#.#.##.#.#.#.#.#.##..####..####..#...#..###.#........##........#.#.
.#.....#####.....####.#...##.#.#..##.#.###.#..##.#.#.#...###.##.#.#.##...#.#...##....#.###.###.#####
.##..#####...#######.##...##..#.####..##..###..#...#.#.####..##.....###.....##.....##..###....######
...###..##.#.#.##.#...#..#...######...#.##..##.####.####.#####.##.#....#####..###...##..#.###..#..#.
.##.#...###.#.###...#.###....###.#.#.##.####.#.....##.....###.#..#.#.#.#.##.##....#...#....##..#....
.....#.###.#...###...#..#.###..#.#...#.#..###...#...##.#.#.####.#####.##.#####..##..##.#..####...#..
...####.#..#.######.#..#.#...###..#...#..#.####....#.#....##.#.##.....###..#.##.#.#.##.#..####.##.#.
#......#.###.###..#####.#....#####.#.##.######.#.#.##...#.###..#..#####.#.#...#.#..#..##########...#
#.#...##..##.###...##..###.###...##..##.#####.###.##.#######.#.#.#..##..#..#.####.##.##..####.#.####
####.#.#..####....####.##..#####..###...#.#...#.#.##.###..##.#..###...##..#.#..#.#.####.#.###..#..##
..##.#..#....##..####.###.####..#.###.##..####..##..###...##..#.##.#####.##.#....###..#.#...#..#....
.#.#.#.#.....#.#..##.#....#.....##.##..##.#....#.##.#...#####.####.##.####.#..#.##..#.###..##.###...
.#....#.#.##.###.#.#.###.###..#..#..#.###.#....#####...#####.##.#.....##..###.##..#..##.##..#...##.#
##..#.###.##.#.##...#....#..#.#.....##...##.#...#.#############.####..#....##.#........###.##..#..#.
...#######.#.##.##...#.#####..####..########.###.#..##.#..##.#.....#..........####.######.....#.....
..####.#.##..#.#......##.#.###....#....##..#.#.#########..#.#..###........#.##.#..#.##....#.#.##.##.
###.########.#.#.....###...#..####..#.#.##.#..#.####.####.##...##.#....#.....######...#...#.#.##..#.
##.#.#.#..#.#.###..##.##..#####.#.#.#..........#.##.#..#..#...#.#.##...#..##.#.##.##...#####.##.###.
###.....##.#..###.#.#..#.#..##.###....##.#.##....#.##.........#..#.##..#.##.#.####.##.#.#.#.###.#.##
..#.##.##..#..##..#.#..##..##..#.####.##..##....#..#.###..#..#..##.....#.....##...#..#..#...##....#.
#..#.##.#.#...#.####..#..##.####...##...####..####.#...##.##...#.#.#.#.......###.#####.##.#.#.#..#.#
.....##.#.###.###.#..#.#....###.#.###.##..#.#..##..#.#...###.##.##.#...##....#.###.#.##.##.#...#####
..#####.##.#####..#.#...#.##...##...##.##.###.#####..#..#..#..#.###..#....###..#..#...###.##.##...#.
##..##..#.#.#.#.#.#.#.###.###.#..#.#....#.##....#####.#..##.#....##..####..###......#.#.#...##.#.###
....#.###.#.#.###.#.##..#.###.....###.###.#.#####.........#....####..#.###..##.####...##..####..####
#######.##.#..#..##...#...#..###..#..#.###...#...#...###...#..#..##.###....#..#...#####..##...##....
#....#....##...##.#####.#.##.##..#...#.#.##.#...#...#..###.......###.#.##..###...#...###...####.#...
.##.#.###.#.....#.##.#.##..#...#.###.#.#.#.###..###.##.##.#.##.##.##....##.#.###.#####.##..#####.###
###...####.####...#......#..###...#...##.#.#....#.##.##......###..#.#...####.#....##..##.....#.###.#
.###..##.....##.##.###...#..####.#...#######..##.#.##..##.##..#.#.##.#.#..#..#....########..##....#.
#.#.##.###..#.##.##.#.###....####..#####.##.#..#.#.##.....#.#.#.....##..#.#.#..#...#..##.#..####.##.
.###..#.####...##.#..####.#...#.#....#..##.#####.#.#..#.#.#.#....#.....#...#.#...#.#...#......#.....
.#####.#..#####.#....##.##.....##.####..#..#.##.###.##....###.##.#####.##.##..####.#.#....#.##....##
###.#.#.#.#.##..............##...##.####....#.##..#...##....#..#...##..#...#####.##.##.#.####....###
...###.###..#.....#..#.##.###..#.#.#.####...###..###.#.....###.###.#####..#####...#.#..#.....##.#.#.
...##......#....#.##.#.##.#.#.#..##.#...#..##.###.#.##..#####.#.##.####..#..#.#######...#..####.#...
..#...#......#.##..##.#........#.#..##.#..###...#....#.#..#..##..##..#...###..#.#..##.#######.#.#.#.
####...###..#..#..##..###.#.####.##..##.####.#...#.##.###.#..#...#.##...#####.#...#...#..#.#.#....##
..#..###....##...#.##.###.##...######.####..#########..####.####.##....#.###..#...###..#.#..#...###.
#..###.##.##....#...####..#.#.#..#.#..#.....#.##..##..#..#.#..#.#.##...#####..#.###.####.##..#......
#.##.##.##.#.##..#...#.#####.#..#....##..#.#######.#..###..##..#.###..#.##...#.....#......#..####.##
##.#.##..###.######.........#######.##.#.##.#...####.####.#######..#..##.#.#....#..#.#####...##.#..#
##..........#.#.######..##...####.#.....#....##..#.#.####.##..##...##...###.##..####.#.#..#...##.#.#
.####..##.#..#.##.#.#.#..#####...####..#.#.#...#.#...#.#.#.#.##.#..#..##.#.####.#......#.#...##.#.#.
####.#.##.##.###.#####..#..###.#.#..###....#....##...##...#..#....####...#####..#.##.#####.##.#.##.#
.##.##..#####.#...#.###.###.#.##..#.##..#.##...##..#.#####.#.#....###.....##.#....##.#.##..#.######.
###.#.#####.#.###.....#######..##.#..#.#.#.##.#.#..#..#.#.##...#.#...#..####..#.##.###..##.#.#.##..#
.#####.####....#..#.#.#.###.#.#...##.#.##.#.#.########...###.##.#..#.#...#..#..##.#.#..#..#.#..#.#..
");
        assert_eq!(part1(&input), 5663);
    }


    #[test]
    pub fn test2() {
        let input = generator

#..#.
#....
##..#
..#..
..###");
        assert_eq!(part2(&input), 3351);
    }

}
